//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TX_ESC_04SessionRememberV2.ServerConnection {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConnectionServiceSoap", Namespace="http://www.escweb.net/newConnectionService")]
    public partial class ConnectionService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ServerInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServerInstance1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectionStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectionString1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectionStringReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ServerNameOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ConnectionService() {
            this.Url = global::TX_ESC_04SessionRememberV2.Properties.Settings.Default.TX_ESC_04SessionRememberV2_ServerConnection_ConnectionService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ServerInstanceCompletedEventHandler ServerInstanceCompleted;
        
        /// <remarks/>
        public event ServerInstance1CompletedEventHandler ServerInstance1Completed;
        
        /// <remarks/>
        public event ConnectionStringCompletedEventHandler ConnectionStringCompleted;
        
        /// <remarks/>
        public event ConnectionString1CompletedEventHandler ConnectionString1Completed;
        
        /// <remarks/>
        public event ConnectionStringReportCompletedEventHandler ConnectionStringReportCompleted;
        
        /// <remarks/>
        public event ServerNameCompletedEventHandler ServerNameCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/ServerInstance", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServerInstance(string CustomerId) {
            object[] results = this.Invoke("ServerInstance", new object[] {
                        CustomerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ServerInstanceAsync(string CustomerId) {
            this.ServerInstanceAsync(CustomerId, null);
        }
        
        /// <remarks/>
        public void ServerInstanceAsync(string CustomerId, object userState) {
            if ((this.ServerInstanceOperationCompleted == null)) {
                this.ServerInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerInstanceOperationCompleted);
            }
            this.InvokeAsync("ServerInstance", new object[] {
                        CustomerId}, this.ServerInstanceOperationCompleted, userState);
        }
        
        private void OnServerInstanceOperationCompleted(object arg) {
            if ((this.ServerInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerInstanceCompleted(this, new ServerInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ServerInstance1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/Server instance by web server", RequestElementName="Server instance by web server", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseElementName="Server instance by web serverResponse", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Server instance by web serverResult")]
        public string ServerInstance(string CustomerId, string webserver) {
            object[] results = this.Invoke("ServerInstance1", new object[] {
                        CustomerId,
                        webserver});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ServerInstance1Async(string CustomerId, string webserver) {
            this.ServerInstance1Async(CustomerId, webserver, null);
        }
        
        /// <remarks/>
        public void ServerInstance1Async(string CustomerId, string webserver, object userState) {
            if ((this.ServerInstance1OperationCompleted == null)) {
                this.ServerInstance1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerInstance1OperationCompleted);
            }
            this.InvokeAsync("ServerInstance1", new object[] {
                        CustomerId,
                        webserver}, this.ServerInstance1OperationCompleted, userState);
        }
        
        private void OnServerInstance1OperationCompleted(object arg) {
            if ((this.ServerInstance1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerInstance1Completed(this, new ServerInstance1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/ConnectionStringDefault", RequestElementName="ConnectionStringDefault", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseElementName="ConnectionStringDefaultResponse", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ConnectionStringDefaultResult")]
        public string ConnectionString(string CustomerId) {
            object[] results = this.Invoke("ConnectionString", new object[] {
                        CustomerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectionStringAsync(string CustomerId) {
            this.ConnectionStringAsync(CustomerId, null);
        }
        
        /// <remarks/>
        public void ConnectionStringAsync(string CustomerId, object userState) {
            if ((this.ConnectionStringOperationCompleted == null)) {
                this.ConnectionStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectionStringOperationCompleted);
            }
            this.InvokeAsync("ConnectionString", new object[] {
                        CustomerId}, this.ConnectionStringOperationCompleted, userState);
        }
        
        private void OnConnectionStringOperationCompleted(object arg) {
            if ((this.ConnectionStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectionStringCompleted(this, new ConnectionStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ConnectionString1")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/ConnectionStringByServer", RequestElementName="ConnectionStringByServer", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseElementName="ConnectionStringByServerResponse", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ConnectionStringByServerResult")]
        public string ConnectionString(string CustomerId, string webserver) {
            object[] results = this.Invoke("ConnectionString1", new object[] {
                        CustomerId,
                        webserver});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectionString1Async(string CustomerId, string webserver) {
            this.ConnectionString1Async(CustomerId, webserver, null);
        }
        
        /// <remarks/>
        public void ConnectionString1Async(string CustomerId, string webserver, object userState) {
            if ((this.ConnectionString1OperationCompleted == null)) {
                this.ConnectionString1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectionString1OperationCompleted);
            }
            this.InvokeAsync("ConnectionString1", new object[] {
                        CustomerId,
                        webserver}, this.ConnectionString1OperationCompleted, userState);
        }
        
        private void OnConnectionString1OperationCompleted(object arg) {
            if ((this.ConnectionString1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectionString1Completed(this, new ConnectionString1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/ConnectionStringByServerForReport", RequestElementName="ConnectionStringByServerForReport", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseElementName="ConnectionStringByServerForReportResponse", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ConnectionStringByServerForReportResult")]
        public string ConnectionStringReport(string CustomerId, string webserver) {
            object[] results = this.Invoke("ConnectionStringReport", new object[] {
                        CustomerId,
                        webserver});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectionStringReportAsync(string CustomerId, string webserver) {
            this.ConnectionStringReportAsync(CustomerId, webserver, null);
        }
        
        /// <remarks/>
        public void ConnectionStringReportAsync(string CustomerId, string webserver, object userState) {
            if ((this.ConnectionStringReportOperationCompleted == null)) {
                this.ConnectionStringReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectionStringReportOperationCompleted);
            }
            this.InvokeAsync("ConnectionStringReport", new object[] {
                        CustomerId,
                        webserver}, this.ConnectionStringReportOperationCompleted, userState);
        }
        
        private void OnConnectionStringReportOperationCompleted(object arg) {
            if ((this.ConnectionStringReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectionStringReportCompleted(this, new ConnectionStringReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.escweb.net/newConnectionService/ServerName", RequestNamespace="http://www.escweb.net/newConnectionService", ResponseNamespace="http://www.escweb.net/newConnectionService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ServerName(string CustomerId, string webserver) {
            object[] results = this.Invoke("ServerName", new object[] {
                        CustomerId,
                        webserver});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ServerNameAsync(string CustomerId, string webserver) {
            this.ServerNameAsync(CustomerId, webserver, null);
        }
        
        /// <remarks/>
        public void ServerNameAsync(string CustomerId, string webserver, object userState) {
            if ((this.ServerNameOperationCompleted == null)) {
                this.ServerNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServerNameOperationCompleted);
            }
            this.InvokeAsync("ServerName", new object[] {
                        CustomerId,
                        webserver}, this.ServerNameOperationCompleted, userState);
        }
        
        private void OnServerNameOperationCompleted(object arg) {
            if ((this.ServerNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ServerNameCompleted(this, new ServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ServerInstanceCompletedEventHandler(object sender, ServerInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServerInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServerInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ServerInstance1CompletedEventHandler(object sender, ServerInstance1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServerInstance1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServerInstance1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ConnectionStringCompletedEventHandler(object sender, ConnectionStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectionStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectionStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ConnectionString1CompletedEventHandler(object sender, ConnectionString1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectionString1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectionString1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ConnectionStringReportCompletedEventHandler(object sender, ConnectionStringReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectionStringReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectionStringReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ServerNameCompletedEventHandler(object sender, ServerNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ServerNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ServerNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591